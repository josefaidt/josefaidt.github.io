{
  "componentChunkName": "component---src-pages-blog-template-js",
  "path": "/blog/2019/02/enhancing-workflow-with-fish/",
  "webpackCompilationHash": "",
  "result": {
    "data": {
      "markdownRemark": {
        "id": "f4de9c1c-b409-59d9-a59c-d90758673771",
        "html": "<p>The tooling surrounding the JavaScript community is uncanny. There are so many useful tools out in the wild such as Webpack, Rollup, create-react-app, <strong>Gatsby</strong>, VSCode extensions, and let's not forget npm &#x26; Yarn! Despite this I feel we often overlook our most important tool, the command line.</p>\n<p>Though daunting at first, the command line has proven its reliability and operability time after time with utilities like Homebrew and Git. Even the lower-level, out-of-the-box utilities like <code class=\"language-text\">cat</code> and <code class=\"language-text\">grep</code> are incredibly useful. If you're not the type of person that prefers point-and-click operations to do something as monotonous copying a file or peeking into a file's contents then you may already know the value bash functions provide to drastically improve your existing workflow. But utilities don't have to be <em>intense</em> to be useful in the smallest regards.</p>\n<p>Typing commands such as <code class=\"language-text\">yarn workspace someWorkspace run someScript</code> can get tedious when you're in the middle of debugging an application. Or even specifying a configuration file in ESLint using <code class=\"language-text\">eslint --config ~/.config/.eslintrc.js someDirectory</code> if you're using a global config file. Some commands or words can be easily fumbled when typing (e.g. \"components\" and \"workspace\"). This is where functions come in to play.</p>\n<h2>Fish Functions</h2>\n<p>Here we will be exploring functions in <a href=\"https://fishshell.com/\">fish shell</a>, specifically how we can use its functions to shorten our everyday commands such as the two noted above. The syntax is different compared to traditional bash aliases, but I hope to get you up and running in no time by guiding you through a few examples.</p>\n<p>Let's start with <code class=\"language-text\">yarn workspaces</code> by using an alias that is as fluid to type as it is short. Open your Fish configuration file via <code class=\"language-text\">code ~/.config/fish/config.fish</code> and input the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"token keyword\">function</span> ywrs\n  <span class=\"token builtin class-name\">command</span> <span class=\"token function\">yarn</span> workspaces <span class=\"token variable\">$argv</span>\nend</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>That's it! You have just created your first function! Let's break this down:</p>\n<ul>\n<li><code class=\"language-text\">function</code>: declaration keyword</li>\n<li><code class=\"language-text\">ywrs</code>: our alias, this is what we will be able to type in our terminal</li>\n<li>\n<p><code class=\"language-text\">command yarn workspaces $argv</code></p>\n<ul>\n<li><code class=\"language-text\">command</code>: keyword needed to tell the shell to \"execute\" the following command, just as how you would normally type into the terminal</li>\n<li><code class=\"language-text\">yarn workspaces</code>: the command we are wrapping</li>\n<li><code class=\"language-text\">$argv</code>: pass the remaining arguments to the defined command</li>\n<li><code class=\"language-text\">ywrs info</code> will thus execute <code class=\"language-text\">yarn workspaces info</code></li>\n</ul>\n</li>\n</ul>\n<p>To test out your new function you will need to reload the fish configuration by reevaluating the <code class=\"language-text\">config.fish</code> file (this is also done when a new shell session is created): <code class=\"language-text\">source ~/.config/fish/config.fish</code>.</p>\n<p>Now that you've got your feet wet, let's try a few more examples.</p>\n<h3>Yarn Workspace</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"token keyword\">function</span> ywr\n  <span class=\"token builtin class-name\">command</span> <span class=\"token function\">yarn</span> workspace <span class=\"token variable\">$argv</span>\nend</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Similar to the initial example, this will allow us to easily execute commands in a workspace via a keyword that is both short and easy to type.</p>\n<h3>ESLint</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"token keyword\">function</span> eslint\n  <span class=\"token builtin class-name\">command</span> eslint --config ~/.eslintrc.js <span class=\"token variable\">$argv</span>\nend</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Here we are extending the existing, global <code class=\"language-text\">eslint</code> command by specifying a configuration file that can now be used throughout your projects without setting up a project-level ESLint dotfile. For additional learning regarding global ESLint and VSCode, check out my other <a href=\"/blog/2019/01/global-eslint/\">blog post</a>.</p>\n<h3>An <em>Intense</em> Example</h3>\n<p>The ESLint example above allows you to use the <code class=\"language-text\">eslint</code> command with a single configuration file, but what about automating the project-level install? Below we will discover how we can leverage functions, internal functions, and a bit of bash logic to install all of our ESLint dependencies and copy our global configuration file to the working directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"token keyword\">function</span> yawn\n    <span class=\"token keyword\">if</span> <span class=\"token builtin class-name\">test</span> <span class=\"token punctuation\">(</span>count <span class=\"token variable\">$argv</span><span class=\"token punctuation\">)</span> -lt <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> or <span class=\"token builtin class-name\">test</span> <span class=\"token variable\">$argv</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"--help\"</span>\n        <span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"Don't yawn too loud now, I need a package name\"</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token builtin class-name\">test</span> <span class=\"token punctuation\">(</span>count <span class=\"token variable\">$argv</span><span class=\"token punctuation\">)</span> -eq <span class=\"token number\">1</span>\n        switch <span class=\"token variable\">$argv</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'eslint'</span>\n                _install_eslint\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span>\n                <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Doesn't look like I have that package, try again.\"</span>\n        end\n    <span class=\"token keyword\">else</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$argv</span>\n    end\nend\n\n<span class=\"token keyword\">function</span> _install_eslint\n    <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D <span class=\"token punctuation\">\\</span>\n        eslint babel-eslint eslint-loader <span class=\"token punctuation\">\\</span>\n        prettier eslint-config-prettier eslint-plugin-prettier <span class=\"token punctuation\">\\</span>\n        eslint-config-standard eslint-plugin-standard <span class=\"token punctuation\">\\</span>\n        eslint-plugin-node <span class=\"token punctuation\">\\</span>\n        eslint-plugin-jsx-a11y <span class=\"token punctuation\">\\</span>\n        eslint-plugin-promise <span class=\"token punctuation\">\\</span>\n        eslint-plugin-import <span class=\"token punctuation\">\\</span>\n        eslint-plugin-react <span class=\"token punctuation\">\\</span>\n    <span class=\"token punctuation\">;</span>and <span class=\"token function\">cp</span> ~/.config/.eslintrc.js <span class=\"token builtin class-name\">.</span>\nend</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Though we won't dive <em>too</em> deep into this example, let's briefly go over what value this example brings to the workflow:</p>\n<ul>\n<li><code class=\"language-text\">function yawn...</code>: high-level alias that acts as a cli utility to route a subcommand (passed as an argument) and call its respective internal alias</li>\n<li>\n<p><code class=\"language-text\">function _install_eslint...</code>: internal alias that will be called from <code class=\"language-text\">yawn</code> given the input is <code class=\"language-text\">yawn eslint</code>.</p>\n<ul>\n<li>installs ESLint dependencies</li>\n<li>copies global ESLint config file</li>\n<li>NOTE: often times commands used internally (not directly called by the user) will be prepended with an underscore, here we utilize this nomenclature to make our <code class=\"language-text\">config.fish</code> file more readable</li>\n</ul>\n</li>\n</ul>\n<p>With these new functions you are now able to dive into a new project and call <code class=\"language-text\">yawn eslint</code> to set up ESLint. Personally I use this all the time and love to automate monotonous tasks just like this example.</p>\n<h2>Final Thoughts</h2>\n<p>So far we've covered:</p>\n<ul>\n<li>Fish functions</li>\n<li>Editing and using the Fish dotfile: <code class=\"language-text\">config.fish</code></li>\n<li>Reloading the dotfile</li>\n<li>Using functions to shorten commands</li>\n<li>Using functions to extend commands</li>\n<li>Using functions to automate tasks</li>\n</ul>\n<p>I hope I was able to convince you to start using this functionality, whether you use the examples provided or by creating your own. Speaking of, in the last example I provided the skeleton to add more subcommands to the <code class=\"language-text\">yawn</code> function, try setting up your own internal function that helps automate the tedious aspects of your workflow! I'd love to hear how Fish functions have enhanced your workflow, Tweet <a href=\"https://twitter.com/garlicbred\">@garlicbred</a> with your story!</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://fishshell.com/docs/current/index.html#syntax\">Fish syntax documentation</a></li>\n<li><a href=\"https://fishshell.com/docs/current/index.html#identifiers\">Fish variables and functions documentation</a></li>\n</ul>",
        "fields": { "slug": "/blog/2019/02/enhancing-workflow-with-fish/" },
        "frontmatter": {
          "title": "Enhancing Your Workflow With Fish Shell Functions",
          "description": "Introduction to enhancing development workflows with the help of Fish functions",
          "tags": ["tooling", "cli", "development", "workflow", "fishshell"],
          "date": "February 27th 2019",
          "image": null
        }
      },
      "site": {
        "siteMetadata": {
          "title": "josef.aidt",
          "url": "https://josefaidt.me",
          "twitter": "garlicbred"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/blog/2019/02/enhancing-workflow-with-fish/"
    }
  }
}
