{
  "componentChunkName": "component---src-pages-blog-template-js",
  "path": "/blog/2019/01/global-eslint/",
  "webpackCompilationHash": "",
  "result": {
    "data": {
      "markdownRemark": {
        "id": "cd3a6fc5-cada-5fb0-b012-ddfd4dac62b4",
        "html": "<p>Okay, when I say installing ESLint \"globally\", I mean using one ESLint config for all VSCode project. You might be wondering why this is useful if you can just load the same config file in every single project, and you can. Setting up a global config file isn't to supercede the benefits of project-level dotfiles, but enhance the times you don't want to set up another project.</p>\n<p>Say you want to practice some interview questions or edit a quick file, but still have your code style for readability. You <em>can</em>. Here I will walk you through setting up your own global ESLint dotfile.</p>\n<h2>ESLint</h2>\n<p>In this brief tutorial we will be using VSCode + ESLint extension to point our editor to wherever we decide to drop our ESLint config file. First things first, let's install ESLint! We will be using <a href=\"https://yarnpkg.org\" target=\"_blank\">Yarn</a> to install our packages. Open your terminal and input the following:</p>\n<p><code class=\"language-text\">yarn global add eslint</code></p>\n<p>Once the command completes its execution you should now see a <code class=\"language-text\">package.json</code> and <code class=\"language-text\">node_modules/</code> folder in your global Yarn directory (tip: to find your directory you can run <code class=\"language-text\">yarn global dir</code>). Now that we have the essentials installed we can go ahead and create our ESLint dotfile:</p>\n<p><code class=\"language-text\">touch ~/.config/.eslintrc.js</code></p>\n<p>Open the newly created file and paste in the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"extends\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"eslint:recommended\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Great, we have ESLint installed globally and our dotfile has been created and populated with some content. We can now move forward to integrating with VSCode.</p>\n<h2>VSCode Integration</h2>\n<p>First, install the <a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" target=\"_blank\">ESLint extension for VSCode</a>. This will give us access to settings available for ESLint in our editor.</p>\n<p>If you created the ESLint dotfile elsewhere than the location noted above, don't worry, the location will not matter (seriously, you can put this thing anywhere if you wanted to, except the project directory - we'll get into that later). What will matter is the fact that VSCode will not be able to utilize environment variables to identify the location of your file, therefore you will need to use the full qualified path (example: <code class=\"language-text\">/Users/josef/.config/</code> rather than <code class=\"language-text\">~/.config</code>). Personally I drop mine in the <code class=\"language-text\">.config/</code> folder instead of the home root to avoid clogging up the directory with a plethora of dotfiles (this is virtually unavoidable). Given this information your VSCode User Settings for ESLint look this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint.autoFixOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint.options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"configFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/Users/josef/.config/.eslintrc.js\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Okay. A couple things to note:</p>\n<ul>\n<li><code class=\"language-text\">&quot;editor.formatOnSave&quot;: false,</code> — we need this turned off otherwise VSCode and ESLint will clash when saving</li>\n<li><code class=\"language-text\">&quot;eslint.autoFixOnSave&quot;: true,</code> — this will turn on ESLint's auto-fixing instead of using VSCode's formatting.</li>\n<li><code class=\"language-text\">&quot;eslint.options&quot;: { &quot;configFile&quot;: &quot;/Users/josef/.config/.eslintrc.js&quot; }</code> — here we pointed VSCode to our recently created dotfile</li>\n<li><code class=\"language-text\">&quot;eslint.packageManager&quot;: &quot;yarn&quot;,</code> — this allows ESLint+VSCode to know <em>where</em> the globally installed packages are location, and is imperative if you are using Yarn. If you replicated our installation steps using <code class=\"language-text\">npm</code> you don't need to worry as that is the default value for this setting.</li>\n</ul>\n<h2>Test It Out</h2>\n<p>We should be all set. Go ahead and open a fresh VSCode instance (or reload your current window), pop open a JavaScript file and type away! You should notice little red squiggles underneath affected code. This is good! For reference as to what the ruleset we used (<code class=\"language-text\">eslint:recommended</code>) you can check out the list of rules <a href=\"https://eslint.org/docs/rules/\" target=\"_blank\">here</a>.</p>\n<hr>\n<h2>A Quick Note</h2>\n<p>If you'd like to dive further into ESLint, I recommend checking out <a href=\"https://prettier.io\" target=\"_blank\">Prettier</a>. I don't use ESLint without Prettier because the formatting provided by Prettier out-of-the-box is <em>amazing</em>. Maybe try out some popular style guides like <a href=\"https://github.com/airbnb/javascript\" target=\"_blank\">AirBnB</a> or <a href=\"https://standardjs.com\" target=\"_blank\">Standard</a> (my personal favorite).</p>\n<h3>Quick Links</h3>\n<ul>\n<li><a href=\"https://gist.github.com/josefaidt/c79bcff379683ac6109730523354fb82\" target=\"_blank\">My current ESLint dotfile</a></li>\n<li><a href=\"https://gist.github.com/josefaidt/ed9dcc84164243c5f03b9340161acd26\" target=\"_blank\">Fish shell ESLint utilities</a> <em>(What is <a href=\"https://fishshell.org\" target=\"_blank\">Fish</a>?)</em></li>\n</ul>",
        "fields": { "slug": "/blog/2019/01/global-eslint/" },
        "frontmatter": {
          "title": "VSCode & Installing ESLint Globally",
          "description": "A brief tutorial to show you how to install ESLint globally and integrate with VSCode",
          "tags": ["tooling", "javascript"],
          "date": "January 29th 2019",
          "image": null
        }
      },
      "site": {
        "siteMetadata": {
          "title": "josef.aidt",
          "url": "https://josefaidt.me",
          "twitter": "garlicbred"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/blog/2019/01/global-eslint/"
    }
  }
}
